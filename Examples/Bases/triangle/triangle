BasisDirectory[triangle] = StringDrop[DirectoryName[$Input], -1]
triangle /: BasisSectors[triangle] := 
  Get[StringJoin[BasisDirectory[triangle], "/BasisSectors[triangle]"]]
triangle /: CurrentState[triangle] := <|NewDsBasis -> True, 
   GenerateIBP -> True, AnalyzeSectors -> True, FindSymmetries -> False|>
triangle /: CutDs[triangle] := {0, 0, 0}
triangle /: Definitions[triangle] := {Hold[MetricTensor[] === d, SetDim[d]], 
   Hold[VecQ[l], Declare[l, Vector]], Hold[VecQ[p1], Declare[p1, Vector]], 
   Hold[VecQ[p2], Declare[p2, Vector]], 
   Hold[LiteRed`Private`ExpresionType[p1] === LiteRed`Private`ExpresionType[
      p1], Declare[p1, LiteRed`Private`ExpresionType[p1]]], 
   Hold[LiteRed`Private`ExpresionType[p2] === LiteRed`Private`ExpresionType[
      p2], Declare[p2, LiteRed`Private`ExpresionType[p2]]], 
   Hold[LiteRed`Private`ExpresionType[s1] === LiteRed`Private`ExpresionType[
      s1], Declare[s1, LiteRed`Private`ExpresionType[s1]]], 
   Hold[LiteRed`Private`ExpresionType[s2] === LiteRed`Private`ExpresionType[
      s2], Declare[s2, LiteRed`Private`ExpresionType[s2]]], 
   Hold[LiteRed`Private`ExpresionType[s3] === LiteRed`Private`ExpresionType[
      s3], Declare[s3, LiteRed`Private`ExpresionType[s3]]], 
   Hold[sp[p1, p1] === s1, sp[p1, p1] = s1], Hold[sp[p2, p2] === s2, 
    sp[p2, p2] = s2], Hold[sp[p1, p2] === (-s1 - s2 + s3)/2, 
    sp[p1, p2] = (-s1 - s2 + s3)/2]}
triangle /: Ds[triangle] := {m^2 - sp[l, l], m^2 - sp[l + p1, l + p1], 
   m^2 - sp[l - p2, l - p2]}
triangle /: DsBasisQ[triangle] := True
triangle /: EMs[triangle] := {p1, p2}
triangle /: ExtMappedSectors[triangle] := {}
triangle /: ExtSectorsMappings[triangle] := {}
triangle /: IBP[triangle] := Get[StringJoin[BasisDirectory[triangle], 
    "/IBP[triangle]"]]
triangle /: Information[triangle] := 
  (If[ValueQ[triangle::usage], Information[triangle, LongForm -> False]]; 
   Print[Grid[Partition[Union[Replace[Replace[First /@ UpValues[triangle] /. 
          HoldPattern -> HoldForm, 
         {HoldPattern[HoldForm[(LiteRed`Private`f$_)[triangle, __]]] :> 
           HoldForm[LiteRed`Private`f$[triangle, "\[Ellipsis]"]]}, {1}], 
        {HoldPattern[LiteRed`Private`x$:HoldForm[(LiteRed`Private`f$_)[
              triangle, ___]]] :> Button[LiteRed`Private`x$, 
           (SelectionMove[ButtonNotebook[], All, GeneratedCell]; 
             NotebookDelete[]; Information[Evaluate[LiteRed`Private`x$[[1,
                0]]], LongForm -> False]; Print[TableForm[Cases[UpValues[
                  triangle], HoldPattern[LiteRed`Private`a$_ :> 
                    LiteRed`Private`b$_] /; MatchQ[LiteRed`Private`a$[[1,0]], 
                   LiteRed`Private`x$[[1,0]]]] /. HoldPattern -> 
                 HoldForm]]) & , Appearance -> "Frameless", 
           BaseStyle -> "InformationLink"]}, {1}]], 5], 
     DefaultBaseStyle -> "InfoGrid"]])
triangle /: jRules[triangle, 0, 0, 1] := 
  Get[StringJoin[BasisDirectory[triangle], "/jRules[triangle, 0, 0, 1]"]]
triangle /: jRules[triangle, 0, 1, 0] := 
  Get[StringJoin[BasisDirectory[triangle], "/jRules[triangle, 0, 1, 0]"]]
triangle /: jRules[triangle, 0, 1, 1] := 
  Get[StringJoin[BasisDirectory[triangle], "/jRules[triangle, 0, 1, 1]"]]
triangle /: jRules[triangle, 1, 0, 0] := 
  Get[StringJoin[BasisDirectory[triangle], "/jRules[triangle, 1, 0, 0]"]]
triangle /: jRules[triangle, 1, 0, 1] := 
  Get[StringJoin[BasisDirectory[triangle], "/jRules[triangle, 1, 0, 1]"]]
triangle /: jRules[triangle, 1, 1, 0] := 
  Get[StringJoin[BasisDirectory[triangle], "/jRules[triangle, 1, 1, 0]"]]
triangle /: jRules[triangle, 1, 1, 1] := 
  Get[StringJoin[BasisDirectory[triangle], "/jRules[triangle, 1, 1, 1]"]]
triangle /: jsOrder[triangle] := {"np", "cp", "-ds", "-ns"}
triangle /: jsOrder[triangle, 0, 0, 0] := {{-1, -1, -1}, {1, 0, 0}, {0, 1, 0}}
triangle /: jsOrder[triangle, 0, 0, 1] := {{-1, -1, 1}, {-1, -1, 0}, 
   {1, 0, 0}}
triangle /: jsOrder[triangle, 0, 1, 0] := {{-1, 1, -1}, {-1, 0, -1}, 
   {1, 0, 0}}
triangle /: jsOrder[triangle, 0, 1, 1] := {{-1, 1, 1}, {-1, 0, 0}, {0, -1, 0}}
triangle /: jsOrder[triangle, 1, 0, 0] := {{1, -1, -1}, {0, -1, -1}, 
   {0, 1, 0}}
triangle /: jsOrder[triangle, 1, 0, 1] := {{1, -1, 1}, {0, -1, 0}, {-1, 0, 0}}
triangle /: jsOrder[triangle, 1, 1, 0] := {{1, 1, -1}, {0, 0, -1}, {-1, 0, 0}}
triangle /: jsOrder[triangle, 1, 1, 1] := {{1, 1, 1}, {-1, 0, 0}, {0, -1, 0}}
triangle /: jSymmetries[triangle, 0, 0, 1] := 
  Get[StringJoin[BasisDirectory[triangle], "/jSymmetries[triangle, 0, 0, 1]"]]
triangle /: jSymmetries[triangle, 0, 1, 1] := 
  Get[StringJoin[BasisDirectory[triangle], "/jSymmetries[triangle, 0, 1, 1]"]]
triangle /: jSymmetries[triangle, 1, 0, 1] := 
  Get[StringJoin[BasisDirectory[triangle], "/jSymmetries[triangle, 1, 0, 1]"]]
triangle /: jSymmetries[triangle, 1, 1, 0] := 
  Get[StringJoin[BasisDirectory[triangle], "/jSymmetries[triangle, 1, 1, 0]"]]
triangle /: jSymmetries[triangle, 1, 1, 1] := 
  Get[StringJoin[BasisDirectory[triangle], "/jSymmetries[triangle, 1, 1, 1]"]]
triangle /: LI[triangle] := Get[StringJoin[BasisDirectory[triangle], 
    "/LI[triangle]"]]
triangle /: LMs[triangle] := {l}
triangle /: MappedSectors[triangle] := 
  Get[StringJoin[BasisDirectory[triangle], "/MappedSectors[triangle]"]]
triangle /: MIs[triangle] := Get[StringJoin[BasisDirectory[triangle], 
    "/MIs[triangle]"]]
triangle /: NDs[triangle] := 3
triangle /: NonZeroSectors[triangle] := 
  Get[StringJoin[BasisDirectory[triangle], "/NonZeroSectors[triangle]"]]
triangle /: Parameters[triangle] := {m, s1, s2, s3, d}
triangle /: PowerShifts[triangle] := {0, 0, 0}
triangle /: SectorsMappings[triangle] := 
  {js[triangle, 0, 1, 0] -> js[triangle, 0, 0, 1], 
   js[triangle, 1, 0, 0] -> js[triangle, 0, 0, 1]}
triangle /: SectorsPattern[triangle] := {___}
triangle /: SimpleSectors[triangle] := 
  Get[StringJoin[BasisDirectory[triangle], "/SimpleSectors[triangle]"]]
triangle /: SPs[triangle] := {sp[l, l], sp[l, p1], sp[l, p2]}
triangle /: SR[triangle] := Get[StringJoin[BasisDirectory[triangle], 
    "/SR[triangle]"]]
triangle /: Toj[triangle] := {sp[l, l] -> m^2 - j[triangle, -1, 0, 0], 
   sp[l, p1] -> (-s1 + j[triangle, -1, 0, 0] - j[triangle, 0, -1, 0])/2, 
   sp[l, p2] -> (s2 - j[triangle, -1, 0, 0] + j[triangle, 0, 0, -1])/2}
triangle /: UniqueSectors[triangle] := 
  Get[StringJoin[BasisDirectory[triangle], "/UniqueSectors[triangle]"]]
triangle /: ZerojRule[triangle] := LiteRed`Private`jjj:j[triangle, __] :> 
   0 /; Module[{LiteRed`Private`jjs = 
       Rest[List @@ jSector[LiteRed`Private`jjj]]}, 
     Or @@ (BitOr[LiteRed`Private`jjs, #1] === #1 & ) /@ {{0, 0, 0}}]
triangle /: ZeroSectors[triangle] := 
  Get[StringJoin[BasisDirectory[triangle], "/ZeroSectors[triangle]"]]
triangle /: SectorsMappings[triangle, LiteRed`Private`ns$:(0 | 1)..] := 
  Cases[SectorsMappings[triangle], HoldPattern[
    js[triangle, LiteRed`Private`ns$] -> _]]
triangle::usage = "1-loop basis with 2 external momenta.\nUse \
Information[triangle] to get basis summary.\nThis string can be redefined by \
setting triangle::usage=\"\[Ellipsis]\""; Information[triangle, 
  LongForm -> False]; 
LiteRed`Private`CheckDefs[triangle]
BasisDirectory[triangle]
